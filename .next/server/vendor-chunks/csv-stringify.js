"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/csv-stringify";
exports.ids = ["vendor-chunks/csv-stringify"];
exports.modules = {

/***/ "(rsc)/./node_modules/csv-stringify/dist/cjs/index.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/csv-stringify/dist/cjs/index.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar stream = __webpack_require__(/*! stream */ \"stream\");\n\nclass CsvError extends Error {\n  constructor(code, message, ...contexts) {\n    if (Array.isArray(message)) message = message.join(\" \");\n    super(message);\n    if (Error.captureStackTrace !== undefined) {\n      Error.captureStackTrace(this, CsvError);\n    }\n    this.code = code;\n    for (const context of contexts) {\n      for (const key in context) {\n        const value = context[key];\n        this[key] = Buffer.isBuffer(value)\n          ? value.toString()\n          : value == null\n            ? value\n            : JSON.parse(JSON.stringify(value));\n      }\n    }\n  }\n}\n\nconst is_object = function (obj) {\n  return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n};\n\n// Lodash implementation of `get`\n\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  \"[^.[\\\\]]+\" +\n    \"|\" +\n    // Or match property names within brackets.\n    \"\\\\[(?:\" +\n    // Match a non-string expression.\n    \"([^\\\"'][^[]*)\" +\n    \"|\" +\n    // Or match strings (supports escaping characters).\n    \"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" +\n    \")\\\\]\" +\n    \"|\" +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    \"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\",\n  \"g\",\n);\nconst reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst reIsPlainProp = /^\\w*$/;\n\nconst getTag = function (value) {\n  // if (!value) value === undefined ? \"[object Undefined]\" : \"[object Null]\";\n  return Object.prototype.toString.call(value);\n};\n\nconst isSymbol = function (value) {\n  const type = typeof value;\n  return (\n    type === \"symbol\" ||\n    (type === \"object\" && value && getTag(value) === \"[object Symbol]\")\n  );\n};\n\nconst isKey = function (value, object) {\n  if (Array.isArray(value)) {\n    return false;\n  }\n  const type = typeof value;\n  if (\n    type === \"number\" ||\n    type === \"symbol\" ||\n    type === \"boolean\" ||\n    !value ||\n    isSymbol(value)\n  ) {\n    return true;\n  }\n  return (\n    reIsPlainProp.test(value) ||\n    !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object))\n  );\n};\n\nconst stringToPath = function (string) {\n  const result = [];\n  if (string.charCodeAt(0) === charCodeOfDot) {\n    result.push(\"\");\n  }\n  string.replace(rePropName, function (match, expression, quote, subString) {\n    let key = match;\n    if (quote) {\n      key = subString.replace(reEscapeChar, \"$1\");\n    } else if (expression) {\n      key = expression.trim();\n    }\n    result.push(key);\n  });\n  return result;\n};\n\nconst castPath = function (value, object) {\n  if (Array.isArray(value)) {\n    return value;\n  } else {\n    return isKey(value, object) ? [value] : stringToPath(value);\n  }\n};\n\nconst toKey = function (value) {\n  if (typeof value === \"string\" || isSymbol(value)) return value;\n  const result = `${value}`;\n  // eslint-disable-next-line\n  return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n};\n\nconst get = function (object, path) {\n  path = castPath(path, object);\n  let index = 0;\n  const length = path.length;\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return index && index === length ? object : undefined;\n};\n\nconst normalize_columns = function (columns) {\n  if (columns === undefined || columns === null) {\n    return [undefined, undefined];\n  }\n  if (typeof columns !== \"object\") {\n    return [Error('Invalid option \"columns\": expect an array or an object')];\n  }\n  if (!Array.isArray(columns)) {\n    const newcolumns = [];\n    for (const k in columns) {\n      newcolumns.push({\n        key: k,\n        header: columns[k],\n      });\n    }\n    columns = newcolumns;\n  } else {\n    const newcolumns = [];\n    for (const column of columns) {\n      if (typeof column === \"string\") {\n        newcolumns.push({\n          key: column,\n          header: column,\n        });\n      } else if (\n        typeof column === \"object\" &&\n        column !== null &&\n        !Array.isArray(column)\n      ) {\n        if (!column.key) {\n          return [\n            Error('Invalid column definition: property \"key\" is required'),\n          ];\n        }\n        if (column.header === undefined) {\n          column.header = column.key;\n        }\n        newcolumns.push(column);\n      } else {\n        return [\n          Error(\"Invalid column definition: expect a string or an object\"),\n        ];\n      }\n    }\n    columns = newcolumns;\n  }\n  return [undefined, columns];\n};\n\nconst underscore = function (str) {\n  return str.replace(/([A-Z])/g, function (_, match) {\n    return \"_\" + match.toLowerCase();\n  });\n};\n\nconst normalize_options = function (opts) {\n  const options = {};\n  // Merge with user options\n  for (const opt in opts) {\n    options[underscore(opt)] = opts[opt];\n  }\n  // Normalize option `bom`\n  if (\n    options.bom === undefined ||\n    options.bom === null ||\n    options.bom === false\n  ) {\n    options.bom = false;\n  } else if (options.bom !== true) {\n    return [\n      new CsvError(\"CSV_OPTION_BOOLEAN_INVALID_TYPE\", [\n        \"option `bom` is optional and must be a boolean value,\",\n        `got ${JSON.stringify(options.bom)}`,\n      ]),\n    ];\n  }\n  // Normalize option `delimiter`\n  if (options.delimiter === undefined || options.delimiter === null) {\n    options.delimiter = \",\";\n  } else if (Buffer.isBuffer(options.delimiter)) {\n    options.delimiter = options.delimiter.toString();\n  } else if (typeof options.delimiter !== \"string\") {\n    return [\n      new CsvError(\"CSV_OPTION_DELIMITER_INVALID_TYPE\", [\n        \"option `delimiter` must be a buffer or a string,\",\n        `got ${JSON.stringify(options.delimiter)}`,\n      ]),\n    ];\n  }\n  // Normalize option `quote`\n  if (options.quote === undefined || options.quote === null) {\n    options.quote = '\"';\n  } else if (options.quote === true) {\n    options.quote = '\"';\n  } else if (options.quote === false) {\n    options.quote = \"\";\n  } else if (Buffer.isBuffer(options.quote)) {\n    options.quote = options.quote.toString();\n  } else if (typeof options.quote !== \"string\") {\n    return [\n      new CsvError(\"CSV_OPTION_QUOTE_INVALID_TYPE\", [\n        \"option `quote` must be a boolean, a buffer or a string,\",\n        `got ${JSON.stringify(options.quote)}`,\n      ]),\n    ];\n  }\n  // Normalize option `quoted`\n  if (options.quoted === undefined || options.quoted === null) {\n    options.quoted = false;\n  }\n  // Normalize option `escape_formulas`\n  if (\n    options.escape_formulas === undefined ||\n    options.escape_formulas === null\n  ) {\n    options.escape_formulas = false;\n  } else if (typeof options.escape_formulas !== \"boolean\") {\n    return [\n      new CsvError(\"CSV_OPTION_ESCAPE_FORMULAS_INVALID_TYPE\", [\n        \"option `escape_formulas` must be a boolean,\",\n        `got ${JSON.stringify(options.escape_formulas)}`,\n      ]),\n    ];\n  }\n  // Normalize option `quoted_empty`\n  if (options.quoted_empty === undefined || options.quoted_empty === null) {\n    options.quoted_empty = undefined;\n  }\n  // Normalize option `quoted_match`\n  if (\n    options.quoted_match === undefined ||\n    options.quoted_match === null ||\n    options.quoted_match === false\n  ) {\n    options.quoted_match = null;\n  } else if (!Array.isArray(options.quoted_match)) {\n    options.quoted_match = [options.quoted_match];\n  }\n  if (options.quoted_match) {\n    for (const quoted_match of options.quoted_match) {\n      const isString = typeof quoted_match === \"string\";\n      const isRegExp = quoted_match instanceof RegExp;\n      if (!isString && !isRegExp) {\n        return [\n          Error(\n            `Invalid Option: quoted_match must be a string or a regex, got ${JSON.stringify(quoted_match)}`,\n          ),\n        ];\n      }\n    }\n  }\n  // Normalize option `quoted_string`\n  if (options.quoted_string === undefined || options.quoted_string === null) {\n    options.quoted_string = false;\n  }\n  // Normalize option `eof`\n  if (options.eof === undefined || options.eof === null) {\n    options.eof = true;\n  }\n  // Normalize option `escape`\n  if (options.escape === undefined || options.escape === null) {\n    options.escape = '\"';\n  } else if (Buffer.isBuffer(options.escape)) {\n    options.escape = options.escape.toString();\n  } else if (typeof options.escape !== \"string\") {\n    return [\n      Error(\n        `Invalid Option: escape must be a buffer or a string, got ${JSON.stringify(options.escape)}`,\n      ),\n    ];\n  }\n  if (options.escape.length > 1) {\n    return [\n      Error(\n        `Invalid Option: escape must be one character, got ${options.escape.length} characters`,\n      ),\n    ];\n  }\n  // Normalize option `header`\n  if (options.header === undefined || options.header === null) {\n    options.header = false;\n  }\n  // Normalize option `columns`\n  const [errColumns, columns] = normalize_columns(options.columns);\n  if (errColumns !== undefined) return [errColumns];\n  options.columns = columns;\n  // Normalize option `quoted`\n  if (options.quoted === undefined || options.quoted === null) {\n    options.quoted = false;\n  }\n  // Normalize option `cast`\n  if (options.cast === undefined || options.cast === null) {\n    options.cast = {};\n  }\n  // Normalize option cast.bigint\n  if (options.cast.bigint === undefined || options.cast.bigint === null) {\n    // Cast boolean to string by default\n    options.cast.bigint = (value) => \"\" + value;\n  }\n  // Normalize option cast.boolean\n  if (options.cast.boolean === undefined || options.cast.boolean === null) {\n    // Cast boolean to string by default\n    options.cast.boolean = (value) => (value ? \"1\" : \"\");\n  }\n  // Normalize option cast.date\n  if (options.cast.date === undefined || options.cast.date === null) {\n    // Cast date to timestamp string by default\n    options.cast.date = (value) => \"\" + value.getTime();\n  }\n  // Normalize option cast.number\n  if (options.cast.number === undefined || options.cast.number === null) {\n    // Cast number to string using native casting by default\n    options.cast.number = (value) => \"\" + value;\n  }\n  // Normalize option cast.object\n  if (options.cast.object === undefined || options.cast.object === null) {\n    // Stringify object as JSON by default\n    options.cast.object = (value) => JSON.stringify(value);\n  }\n  // Normalize option cast.string\n  if (options.cast.string === undefined || options.cast.string === null) {\n    // Leave string untouched\n    options.cast.string = function (value) {\n      return value;\n    };\n  }\n  // Normalize option `on_record`\n  if (\n    options.on_record !== undefined &&\n    typeof options.on_record !== \"function\"\n  ) {\n    return [Error(`Invalid Option: \"on_record\" must be a function.`)];\n  }\n  // Normalize option `record_delimiter`\n  if (\n    options.record_delimiter === undefined ||\n    options.record_delimiter === null\n  ) {\n    options.record_delimiter = \"\\n\";\n  } else if (Buffer.isBuffer(options.record_delimiter)) {\n    options.record_delimiter = options.record_delimiter.toString();\n  } else if (typeof options.record_delimiter !== \"string\") {\n    return [\n      Error(\n        `Invalid Option: record_delimiter must be a buffer or a string, got ${JSON.stringify(options.record_delimiter)}`,\n      ),\n    ];\n  }\n  switch (options.record_delimiter) {\n    case \"unix\":\n      options.record_delimiter = \"\\n\";\n      break;\n    case \"mac\":\n      options.record_delimiter = \"\\r\";\n      break;\n    case \"windows\":\n      options.record_delimiter = \"\\r\\n\";\n      break;\n    case \"ascii\":\n      options.record_delimiter = \"\\u001e\";\n      break;\n    case \"unicode\":\n      options.record_delimiter = \"\\u2028\";\n      break;\n  }\n  return [undefined, options];\n};\n\nconst bom_utf8 = Buffer.from([239, 187, 191]);\n\nconst stringifier = function (options, state, info) {\n  return {\n    options: options,\n    state: state,\n    info: info,\n    __transform: function (chunk, push) {\n      // Chunk validation\n      if (!Array.isArray(chunk) && typeof chunk !== \"object\") {\n        return Error(\n          `Invalid Record: expect an array or an object, got ${JSON.stringify(chunk)}`,\n        );\n      }\n      // Detect columns from the first record\n      if (this.info.records === 0) {\n        if (Array.isArray(chunk)) {\n          if (\n            this.options.header === true &&\n            this.options.columns === undefined\n          ) {\n            return Error(\n              \"Undiscoverable Columns: header option requires column option or object records\",\n            );\n          }\n        } else if (this.options.columns === undefined) {\n          const [err, columns] = normalize_columns(Object.keys(chunk));\n          if (err) return;\n          this.options.columns = columns;\n        }\n      }\n      // Emit the header\n      if (this.info.records === 0) {\n        this.bom(push);\n        const err = this.headers(push);\n        if (err) return err;\n      }\n      // Emit and stringify the record if an object or an array\n      try {\n        // this.emit('record', chunk, this.info.records);\n        if (this.options.on_record) {\n          this.options.on_record(chunk, this.info.records);\n        }\n      } catch (err) {\n        return err;\n      }\n      // Convert the record into a string\n      let err, chunk_string;\n      if (this.options.eof) {\n        [err, chunk_string] = this.stringify(chunk);\n        if (err) return err;\n        if (chunk_string === undefined) {\n          return;\n        } else {\n          chunk_string = chunk_string + this.options.record_delimiter;\n        }\n      } else {\n        [err, chunk_string] = this.stringify(chunk);\n        if (err) return err;\n        if (chunk_string === undefined) {\n          return;\n        } else {\n          if (this.options.header || this.info.records) {\n            chunk_string = this.options.record_delimiter + chunk_string;\n          }\n        }\n      }\n      // Emit the csv\n      this.info.records++;\n      push(chunk_string);\n    },\n    stringify: function (chunk, chunkIsHeader = false) {\n      if (typeof chunk !== \"object\") {\n        return [undefined, chunk];\n      }\n      const { columns } = this.options;\n      const record = [];\n      // Record is an array\n      if (Array.isArray(chunk)) {\n        // We are getting an array but the user has specified output columns. In\n        // this case, we respect the columns indexes\n        if (columns) {\n          chunk.splice(columns.length);\n        }\n        // Cast record elements\n        for (let i = 0; i < chunk.length; i++) {\n          const field = chunk[i];\n          const [err, value] = this.__cast(field, {\n            index: i,\n            column: i,\n            records: this.info.records,\n            header: chunkIsHeader,\n          });\n          if (err) return [err];\n          record[i] = [value, field];\n        }\n        // Record is a literal object\n        // `columns` is always defined: it is either provided or discovered.\n      } else {\n        for (let i = 0; i < columns.length; i++) {\n          const field = get(chunk, columns[i].key);\n          const [err, value] = this.__cast(field, {\n            index: i,\n            column: columns[i].key,\n            records: this.info.records,\n            header: chunkIsHeader,\n          });\n          if (err) return [err];\n          record[i] = [value, field];\n        }\n      }\n      let csvrecord = \"\";\n      for (let i = 0; i < record.length; i++) {\n        let options, err;\n\n        let [value, field] = record[i];\n        if (typeof value === \"string\") {\n          options = this.options;\n        } else if (is_object(value)) {\n          options = value;\n          value = options.value;\n          delete options.value;\n          if (\n            typeof value !== \"string\" &&\n            value !== undefined &&\n            value !== null\n          ) {\n            if (err)\n              return [\n                Error(\n                  `Invalid Casting Value: returned value must return a string, null or undefined, got ${JSON.stringify(value)}`,\n                ),\n              ];\n          }\n          options = { ...this.options, ...options };\n          [err, options] = normalize_options(options);\n          if (err !== undefined) {\n            return [err];\n          }\n        } else if (value === undefined || value === null) {\n          options = this.options;\n        } else {\n          return [\n            Error(\n              `Invalid Casting Value: returned value must return a string, an object, null or undefined, got ${JSON.stringify(value)}`,\n            ),\n          ];\n        }\n        const {\n          delimiter,\n          escape,\n          quote,\n          quoted,\n          quoted_empty,\n          quoted_string,\n          quoted_match,\n          record_delimiter,\n          escape_formulas,\n        } = options;\n        if (\"\" === value && \"\" === field) {\n          let quotedMatch =\n            quoted_match &&\n            quoted_match.filter((quoted_match) => {\n              if (typeof quoted_match === \"string\") {\n                return value.indexOf(quoted_match) !== -1;\n              } else {\n                return quoted_match.test(value);\n              }\n            });\n          quotedMatch = quotedMatch && quotedMatch.length > 0;\n          const shouldQuote =\n            quotedMatch ||\n            true === quoted_empty ||\n            (true === quoted_string && false !== quoted_empty);\n          if (shouldQuote === true) {\n            value = quote + value + quote;\n          }\n          csvrecord += value;\n        } else if (value) {\n          if (typeof value !== \"string\") {\n            return [\n              Error(\n                `Formatter must return a string, null or undefined, got ${JSON.stringify(value)}`,\n              ),\n            ];\n          }\n          const containsdelimiter =\n            delimiter.length && value.indexOf(delimiter) >= 0;\n          const containsQuote = quote !== \"\" && value.indexOf(quote) >= 0;\n          const containsEscape = value.indexOf(escape) >= 0 && escape !== quote;\n          const containsRecordDelimiter = value.indexOf(record_delimiter) >= 0;\n          const quotedString = quoted_string && typeof field === \"string\";\n          let quotedMatch =\n            quoted_match &&\n            quoted_match.filter((quoted_match) => {\n              if (typeof quoted_match === \"string\") {\n                return value.indexOf(quoted_match) !== -1;\n              } else {\n                return quoted_match.test(value);\n              }\n            });\n          quotedMatch = quotedMatch && quotedMatch.length > 0;\n          // See https://github.com/adaltas/node-csv/pull/387\n          // More about CSV injection or formula injection, when websites embed\n          // untrusted input inside CSV files:\n          // https://owasp.org/www-community/attacks/CSV_Injection\n          // http://georgemauer.net/2017/10/07/csv-injection.html\n          // Apple Numbers unicode normalization is empirical from testing\n          if (escape_formulas) {\n            switch (value[0]) {\n              case \"=\":\n              case \"+\":\n              case \"-\":\n              case \"@\":\n              case \"\\t\":\n              case \"\\r\":\n              case \"\\uFF1D\": // Unicode '='\n              case \"\\uFF0B\": // Unicode '+'\n              case \"\\uFF0D\": // Unicode '-'\n              case \"\\uFF20\": // Unicode '@'\n                value = `'${value}`;\n                break;\n            }\n          }\n          const shouldQuote =\n            containsQuote === true ||\n            containsdelimiter ||\n            containsRecordDelimiter ||\n            quoted ||\n            quotedString ||\n            quotedMatch;\n          if (shouldQuote === true && containsEscape === true) {\n            const regexp =\n              escape === \"\\\\\"\n                ? new RegExp(escape + escape, \"g\")\n                : new RegExp(escape, \"g\");\n            value = value.replace(regexp, escape + escape);\n          }\n          if (containsQuote === true) {\n            const regexp = new RegExp(quote, \"g\");\n            value = value.replace(regexp, escape + quote);\n          }\n          if (shouldQuote === true) {\n            value = quote + value + quote;\n          }\n          csvrecord += value;\n        } else if (\n          quoted_empty === true ||\n          (field === \"\" && quoted_string === true && quoted_empty !== false)\n        ) {\n          csvrecord += quote + quote;\n        }\n        if (i !== record.length - 1) {\n          csvrecord += delimiter;\n        }\n      }\n      return [undefined, csvrecord];\n    },\n    bom: function (push) {\n      if (this.options.bom !== true) {\n        return;\n      }\n      push(bom_utf8);\n    },\n    headers: function (push) {\n      if (this.options.header === false) {\n        return;\n      }\n      if (this.options.columns === undefined) {\n        return;\n      }\n      let err;\n      let headers = this.options.columns.map((column) => column.header);\n      if (this.options.eof) {\n        [err, headers] = this.stringify(headers, true);\n        headers += this.options.record_delimiter;\n      } else {\n        [err, headers] = this.stringify(headers);\n      }\n      if (err) return err;\n      push(headers);\n    },\n    __cast: function (value, context) {\n      const type = typeof value;\n      try {\n        if (type === \"string\") {\n          // Fine for 99% of the cases\n          return [undefined, this.options.cast.string(value, context)];\n        } else if (type === \"bigint\") {\n          return [undefined, this.options.cast.bigint(value, context)];\n        } else if (type === \"number\") {\n          return [undefined, this.options.cast.number(value, context)];\n        } else if (type === \"boolean\") {\n          return [undefined, this.options.cast.boolean(value, context)];\n        } else if (value instanceof Date) {\n          return [undefined, this.options.cast.date(value, context)];\n        } else if (type === \"object\" && value !== null) {\n          return [undefined, this.options.cast.object(value, context)];\n        } else {\n          return [undefined, value, value];\n        }\n      } catch (err) {\n        return [err];\n      }\n    },\n  };\n};\n\n/*\nCSV Stringify\n\nPlease look at the [project documentation](https://csv.js.org/stringify/) for\nadditional information.\n*/\n\n\nclass Stringifier extends stream.Transform {\n  constructor(opts = {}) {\n    super({ ...{ writableObjectMode: true }, ...opts });\n    const [err, options] = normalize_options(opts);\n    if (err !== undefined) throw err;\n    // Expose options\n    this.options = options;\n    // Internal state\n    this.state = {\n      stop: false,\n    };\n    // Information\n    this.info = {\n      records: 0,\n    };\n    this.api = stringifier(this.options, this.state, this.info);\n    this.api.options.on_record = (...args) => {\n      this.emit(\"record\", ...args);\n    };\n  }\n  _transform(chunk, encoding, callback) {\n    if (this.state.stop === true) {\n      return;\n    }\n    const err = this.api.__transform(chunk, this.push.bind(this));\n    if (err !== undefined) {\n      this.state.stop = true;\n    }\n    callback(err);\n  }\n  _flush(callback) {\n    if (this.state.stop === true) {\n      // Note, Node.js 12 call flush even after an error, we must prevent\n      // `callback` from being called in flush without any error.\n      return;\n    }\n    if (this.info.records === 0) {\n      this.api.bom(this.push.bind(this));\n      const err = this.api.headers(this.push.bind(this));\n      if (err) callback(err);\n    }\n    callback();\n  }\n}\n\nconst stringify = function () {\n  let data, options, callback;\n  for (const i in arguments) {\n    const argument = arguments[i];\n    const type = typeof argument;\n    if (data === undefined && Array.isArray(argument)) {\n      data = argument;\n    } else if (options === undefined && is_object(argument)) {\n      options = argument;\n    } else if (callback === undefined && type === \"function\") {\n      callback = argument;\n    } else {\n      throw new CsvError(\"CSV_INVALID_ARGUMENT\", [\n        \"Invalid argument:\",\n        `got ${JSON.stringify(argument)} at index ${i}`,\n      ]);\n    }\n  }\n  const stringifier = new Stringifier(options);\n  if (callback) {\n    const chunks = [];\n    stringifier.on(\"readable\", function () {\n      let chunk;\n      while ((chunk = this.read()) !== null) {\n        chunks.push(chunk);\n      }\n    });\n    stringifier.on(\"error\", function (err) {\n      callback(err);\n    });\n    stringifier.on(\"end\", function () {\n      try {\n        callback(undefined, chunks.join(\"\"));\n      } catch (err) {\n        // This can happen if the `chunks` is extremely long; it may throw\n        // \"Cannot create a string longer than 0x1fffffe8 characters\"\n        // See [#386](https://github.com/adaltas/node-csv/pull/386)\n        callback(err);\n        return;\n      }\n    });\n  }\n  if (data !== undefined) {\n    const writer = function () {\n      for (const record of data) {\n        stringifier.write(record);\n      }\n      stringifier.end();\n    };\n    // Support Deno, Rollup doesnt provide a shim for setImmediate\n    if (typeof setImmediate === \"function\") {\n      setImmediate(writer);\n    } else {\n      setTimeout(writer, 0);\n    }\n  }\n  return stringifier;\n};\n\nexports.CsvError = CsvError;\nexports.Stringifier = Stringifier;\nexports.stringify = stringify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/csv-stringify/dist/cjs/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/csv-stringify/dist/cjs/sync.cjs":
/*!******************************************************!*\
  !*** ./node_modules/csv-stringify/dist/cjs/sync.cjs ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n// Lodash implementation of `get`\n\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  \"[^.[\\\\]]+\" +\n    \"|\" +\n    // Or match property names within brackets.\n    \"\\\\[(?:\" +\n    // Match a non-string expression.\n    \"([^\\\"'][^[]*)\" +\n    \"|\" +\n    // Or match strings (supports escaping characters).\n    \"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" +\n    \")\\\\]\" +\n    \"|\" +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    \"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\",\n  \"g\",\n);\nconst reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst reIsPlainProp = /^\\w*$/;\n\nconst getTag = function (value) {\n  // if (!value) value === undefined ? \"[object Undefined]\" : \"[object Null]\";\n  return Object.prototype.toString.call(value);\n};\n\nconst isSymbol = function (value) {\n  const type = typeof value;\n  return (\n    type === \"symbol\" ||\n    (type === \"object\" && value && getTag(value) === \"[object Symbol]\")\n  );\n};\n\nconst isKey = function (value, object) {\n  if (Array.isArray(value)) {\n    return false;\n  }\n  const type = typeof value;\n  if (\n    type === \"number\" ||\n    type === \"symbol\" ||\n    type === \"boolean\" ||\n    !value ||\n    isSymbol(value)\n  ) {\n    return true;\n  }\n  return (\n    reIsPlainProp.test(value) ||\n    !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object))\n  );\n};\n\nconst stringToPath = function (string) {\n  const result = [];\n  if (string.charCodeAt(0) === charCodeOfDot) {\n    result.push(\"\");\n  }\n  string.replace(rePropName, function (match, expression, quote, subString) {\n    let key = match;\n    if (quote) {\n      key = subString.replace(reEscapeChar, \"$1\");\n    } else if (expression) {\n      key = expression.trim();\n    }\n    result.push(key);\n  });\n  return result;\n};\n\nconst castPath = function (value, object) {\n  if (Array.isArray(value)) {\n    return value;\n  } else {\n    return isKey(value, object) ? [value] : stringToPath(value);\n  }\n};\n\nconst toKey = function (value) {\n  if (typeof value === \"string\" || isSymbol(value)) return value;\n  const result = `${value}`;\n  // eslint-disable-next-line\n  return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n};\n\nconst get = function (object, path) {\n  path = castPath(path, object);\n  let index = 0;\n  const length = path.length;\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return index && index === length ? object : undefined;\n};\n\nconst is_object = function (obj) {\n  return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n};\n\nconst normalize_columns = function (columns) {\n  if (columns === undefined || columns === null) {\n    return [undefined, undefined];\n  }\n  if (typeof columns !== \"object\") {\n    return [Error('Invalid option \"columns\": expect an array or an object')];\n  }\n  if (!Array.isArray(columns)) {\n    const newcolumns = [];\n    for (const k in columns) {\n      newcolumns.push({\n        key: k,\n        header: columns[k],\n      });\n    }\n    columns = newcolumns;\n  } else {\n    const newcolumns = [];\n    for (const column of columns) {\n      if (typeof column === \"string\") {\n        newcolumns.push({\n          key: column,\n          header: column,\n        });\n      } else if (\n        typeof column === \"object\" &&\n        column !== null &&\n        !Array.isArray(column)\n      ) {\n        if (!column.key) {\n          return [\n            Error('Invalid column definition: property \"key\" is required'),\n          ];\n        }\n        if (column.header === undefined) {\n          column.header = column.key;\n        }\n        newcolumns.push(column);\n      } else {\n        return [\n          Error(\"Invalid column definition: expect a string or an object\"),\n        ];\n      }\n    }\n    columns = newcolumns;\n  }\n  return [undefined, columns];\n};\n\nclass CsvError extends Error {\n  constructor(code, message, ...contexts) {\n    if (Array.isArray(message)) message = message.join(\" \");\n    super(message);\n    if (Error.captureStackTrace !== undefined) {\n      Error.captureStackTrace(this, CsvError);\n    }\n    this.code = code;\n    for (const context of contexts) {\n      for (const key in context) {\n        const value = context[key];\n        this[key] = Buffer.isBuffer(value)\n          ? value.toString()\n          : value == null\n            ? value\n            : JSON.parse(JSON.stringify(value));\n      }\n    }\n  }\n}\n\nconst underscore = function (str) {\n  return str.replace(/([A-Z])/g, function (_, match) {\n    return \"_\" + match.toLowerCase();\n  });\n};\n\nconst normalize_options = function (opts) {\n  const options = {};\n  // Merge with user options\n  for (const opt in opts) {\n    options[underscore(opt)] = opts[opt];\n  }\n  // Normalize option `bom`\n  if (\n    options.bom === undefined ||\n    options.bom === null ||\n    options.bom === false\n  ) {\n    options.bom = false;\n  } else if (options.bom !== true) {\n    return [\n      new CsvError(\"CSV_OPTION_BOOLEAN_INVALID_TYPE\", [\n        \"option `bom` is optional and must be a boolean value,\",\n        `got ${JSON.stringify(options.bom)}`,\n      ]),\n    ];\n  }\n  // Normalize option `delimiter`\n  if (options.delimiter === undefined || options.delimiter === null) {\n    options.delimiter = \",\";\n  } else if (Buffer.isBuffer(options.delimiter)) {\n    options.delimiter = options.delimiter.toString();\n  } else if (typeof options.delimiter !== \"string\") {\n    return [\n      new CsvError(\"CSV_OPTION_DELIMITER_INVALID_TYPE\", [\n        \"option `delimiter` must be a buffer or a string,\",\n        `got ${JSON.stringify(options.delimiter)}`,\n      ]),\n    ];\n  }\n  // Normalize option `quote`\n  if (options.quote === undefined || options.quote === null) {\n    options.quote = '\"';\n  } else if (options.quote === true) {\n    options.quote = '\"';\n  } else if (options.quote === false) {\n    options.quote = \"\";\n  } else if (Buffer.isBuffer(options.quote)) {\n    options.quote = options.quote.toString();\n  } else if (typeof options.quote !== \"string\") {\n    return [\n      new CsvError(\"CSV_OPTION_QUOTE_INVALID_TYPE\", [\n        \"option `quote` must be a boolean, a buffer or a string,\",\n        `got ${JSON.stringify(options.quote)}`,\n      ]),\n    ];\n  }\n  // Normalize option `quoted`\n  if (options.quoted === undefined || options.quoted === null) {\n    options.quoted = false;\n  }\n  // Normalize option `escape_formulas`\n  if (\n    options.escape_formulas === undefined ||\n    options.escape_formulas === null\n  ) {\n    options.escape_formulas = false;\n  } else if (typeof options.escape_formulas !== \"boolean\") {\n    return [\n      new CsvError(\"CSV_OPTION_ESCAPE_FORMULAS_INVALID_TYPE\", [\n        \"option `escape_formulas` must be a boolean,\",\n        `got ${JSON.stringify(options.escape_formulas)}`,\n      ]),\n    ];\n  }\n  // Normalize option `quoted_empty`\n  if (options.quoted_empty === undefined || options.quoted_empty === null) {\n    options.quoted_empty = undefined;\n  }\n  // Normalize option `quoted_match`\n  if (\n    options.quoted_match === undefined ||\n    options.quoted_match === null ||\n    options.quoted_match === false\n  ) {\n    options.quoted_match = null;\n  } else if (!Array.isArray(options.quoted_match)) {\n    options.quoted_match = [options.quoted_match];\n  }\n  if (options.quoted_match) {\n    for (const quoted_match of options.quoted_match) {\n      const isString = typeof quoted_match === \"string\";\n      const isRegExp = quoted_match instanceof RegExp;\n      if (!isString && !isRegExp) {\n        return [\n          Error(\n            `Invalid Option: quoted_match must be a string or a regex, got ${JSON.stringify(quoted_match)}`,\n          ),\n        ];\n      }\n    }\n  }\n  // Normalize option `quoted_string`\n  if (options.quoted_string === undefined || options.quoted_string === null) {\n    options.quoted_string = false;\n  }\n  // Normalize option `eof`\n  if (options.eof === undefined || options.eof === null) {\n    options.eof = true;\n  }\n  // Normalize option `escape`\n  if (options.escape === undefined || options.escape === null) {\n    options.escape = '\"';\n  } else if (Buffer.isBuffer(options.escape)) {\n    options.escape = options.escape.toString();\n  } else if (typeof options.escape !== \"string\") {\n    return [\n      Error(\n        `Invalid Option: escape must be a buffer or a string, got ${JSON.stringify(options.escape)}`,\n      ),\n    ];\n  }\n  if (options.escape.length > 1) {\n    return [\n      Error(\n        `Invalid Option: escape must be one character, got ${options.escape.length} characters`,\n      ),\n    ];\n  }\n  // Normalize option `header`\n  if (options.header === undefined || options.header === null) {\n    options.header = false;\n  }\n  // Normalize option `columns`\n  const [errColumns, columns] = normalize_columns(options.columns);\n  if (errColumns !== undefined) return [errColumns];\n  options.columns = columns;\n  // Normalize option `quoted`\n  if (options.quoted === undefined || options.quoted === null) {\n    options.quoted = false;\n  }\n  // Normalize option `cast`\n  if (options.cast === undefined || options.cast === null) {\n    options.cast = {};\n  }\n  // Normalize option cast.bigint\n  if (options.cast.bigint === undefined || options.cast.bigint === null) {\n    // Cast boolean to string by default\n    options.cast.bigint = (value) => \"\" + value;\n  }\n  // Normalize option cast.boolean\n  if (options.cast.boolean === undefined || options.cast.boolean === null) {\n    // Cast boolean to string by default\n    options.cast.boolean = (value) => (value ? \"1\" : \"\");\n  }\n  // Normalize option cast.date\n  if (options.cast.date === undefined || options.cast.date === null) {\n    // Cast date to timestamp string by default\n    options.cast.date = (value) => \"\" + value.getTime();\n  }\n  // Normalize option cast.number\n  if (options.cast.number === undefined || options.cast.number === null) {\n    // Cast number to string using native casting by default\n    options.cast.number = (value) => \"\" + value;\n  }\n  // Normalize option cast.object\n  if (options.cast.object === undefined || options.cast.object === null) {\n    // Stringify object as JSON by default\n    options.cast.object = (value) => JSON.stringify(value);\n  }\n  // Normalize option cast.string\n  if (options.cast.string === undefined || options.cast.string === null) {\n    // Leave string untouched\n    options.cast.string = function (value) {\n      return value;\n    };\n  }\n  // Normalize option `on_record`\n  if (\n    options.on_record !== undefined &&\n    typeof options.on_record !== \"function\"\n  ) {\n    return [Error(`Invalid Option: \"on_record\" must be a function.`)];\n  }\n  // Normalize option `record_delimiter`\n  if (\n    options.record_delimiter === undefined ||\n    options.record_delimiter === null\n  ) {\n    options.record_delimiter = \"\\n\";\n  } else if (Buffer.isBuffer(options.record_delimiter)) {\n    options.record_delimiter = options.record_delimiter.toString();\n  } else if (typeof options.record_delimiter !== \"string\") {\n    return [\n      Error(\n        `Invalid Option: record_delimiter must be a buffer or a string, got ${JSON.stringify(options.record_delimiter)}`,\n      ),\n    ];\n  }\n  switch (options.record_delimiter) {\n    case \"unix\":\n      options.record_delimiter = \"\\n\";\n      break;\n    case \"mac\":\n      options.record_delimiter = \"\\r\";\n      break;\n    case \"windows\":\n      options.record_delimiter = \"\\r\\n\";\n      break;\n    case \"ascii\":\n      options.record_delimiter = \"\\u001e\";\n      break;\n    case \"unicode\":\n      options.record_delimiter = \"\\u2028\";\n      break;\n  }\n  return [undefined, options];\n};\n\nconst bom_utf8 = Buffer.from([239, 187, 191]);\n\nconst stringifier = function (options, state, info) {\n  return {\n    options: options,\n    state: state,\n    info: info,\n    __transform: function (chunk, push) {\n      // Chunk validation\n      if (!Array.isArray(chunk) && typeof chunk !== \"object\") {\n        return Error(\n          `Invalid Record: expect an array or an object, got ${JSON.stringify(chunk)}`,\n        );\n      }\n      // Detect columns from the first record\n      if (this.info.records === 0) {\n        if (Array.isArray(chunk)) {\n          if (\n            this.options.header === true &&\n            this.options.columns === undefined\n          ) {\n            return Error(\n              \"Undiscoverable Columns: header option requires column option or object records\",\n            );\n          }\n        } else if (this.options.columns === undefined) {\n          const [err, columns] = normalize_columns(Object.keys(chunk));\n          if (err) return;\n          this.options.columns = columns;\n        }\n      }\n      // Emit the header\n      if (this.info.records === 0) {\n        this.bom(push);\n        const err = this.headers(push);\n        if (err) return err;\n      }\n      // Emit and stringify the record if an object or an array\n      try {\n        // this.emit('record', chunk, this.info.records);\n        if (this.options.on_record) {\n          this.options.on_record(chunk, this.info.records);\n        }\n      } catch (err) {\n        return err;\n      }\n      // Convert the record into a string\n      let err, chunk_string;\n      if (this.options.eof) {\n        [err, chunk_string] = this.stringify(chunk);\n        if (err) return err;\n        if (chunk_string === undefined) {\n          return;\n        } else {\n          chunk_string = chunk_string + this.options.record_delimiter;\n        }\n      } else {\n        [err, chunk_string] = this.stringify(chunk);\n        if (err) return err;\n        if (chunk_string === undefined) {\n          return;\n        } else {\n          if (this.options.header || this.info.records) {\n            chunk_string = this.options.record_delimiter + chunk_string;\n          }\n        }\n      }\n      // Emit the csv\n      this.info.records++;\n      push(chunk_string);\n    },\n    stringify: function (chunk, chunkIsHeader = false) {\n      if (typeof chunk !== \"object\") {\n        return [undefined, chunk];\n      }\n      const { columns } = this.options;\n      const record = [];\n      // Record is an array\n      if (Array.isArray(chunk)) {\n        // We are getting an array but the user has specified output columns. In\n        // this case, we respect the columns indexes\n        if (columns) {\n          chunk.splice(columns.length);\n        }\n        // Cast record elements\n        for (let i = 0; i < chunk.length; i++) {\n          const field = chunk[i];\n          const [err, value] = this.__cast(field, {\n            index: i,\n            column: i,\n            records: this.info.records,\n            header: chunkIsHeader,\n          });\n          if (err) return [err];\n          record[i] = [value, field];\n        }\n        // Record is a literal object\n        // `columns` is always defined: it is either provided or discovered.\n      } else {\n        for (let i = 0; i < columns.length; i++) {\n          const field = get(chunk, columns[i].key);\n          const [err, value] = this.__cast(field, {\n            index: i,\n            column: columns[i].key,\n            records: this.info.records,\n            header: chunkIsHeader,\n          });\n          if (err) return [err];\n          record[i] = [value, field];\n        }\n      }\n      let csvrecord = \"\";\n      for (let i = 0; i < record.length; i++) {\n        let options, err;\n\n        let [value, field] = record[i];\n        if (typeof value === \"string\") {\n          options = this.options;\n        } else if (is_object(value)) {\n          options = value;\n          value = options.value;\n          delete options.value;\n          if (\n            typeof value !== \"string\" &&\n            value !== undefined &&\n            value !== null\n          ) {\n            if (err)\n              return [\n                Error(\n                  `Invalid Casting Value: returned value must return a string, null or undefined, got ${JSON.stringify(value)}`,\n                ),\n              ];\n          }\n          options = { ...this.options, ...options };\n          [err, options] = normalize_options(options);\n          if (err !== undefined) {\n            return [err];\n          }\n        } else if (value === undefined || value === null) {\n          options = this.options;\n        } else {\n          return [\n            Error(\n              `Invalid Casting Value: returned value must return a string, an object, null or undefined, got ${JSON.stringify(value)}`,\n            ),\n          ];\n        }\n        const {\n          delimiter,\n          escape,\n          quote,\n          quoted,\n          quoted_empty,\n          quoted_string,\n          quoted_match,\n          record_delimiter,\n          escape_formulas,\n        } = options;\n        if (\"\" === value && \"\" === field) {\n          let quotedMatch =\n            quoted_match &&\n            quoted_match.filter((quoted_match) => {\n              if (typeof quoted_match === \"string\") {\n                return value.indexOf(quoted_match) !== -1;\n              } else {\n                return quoted_match.test(value);\n              }\n            });\n          quotedMatch = quotedMatch && quotedMatch.length > 0;\n          const shouldQuote =\n            quotedMatch ||\n            true === quoted_empty ||\n            (true === quoted_string && false !== quoted_empty);\n          if (shouldQuote === true) {\n            value = quote + value + quote;\n          }\n          csvrecord += value;\n        } else if (value) {\n          if (typeof value !== \"string\") {\n            return [\n              Error(\n                `Formatter must return a string, null or undefined, got ${JSON.stringify(value)}`,\n              ),\n            ];\n          }\n          const containsdelimiter =\n            delimiter.length && value.indexOf(delimiter) >= 0;\n          const containsQuote = quote !== \"\" && value.indexOf(quote) >= 0;\n          const containsEscape = value.indexOf(escape) >= 0 && escape !== quote;\n          const containsRecordDelimiter = value.indexOf(record_delimiter) >= 0;\n          const quotedString = quoted_string && typeof field === \"string\";\n          let quotedMatch =\n            quoted_match &&\n            quoted_match.filter((quoted_match) => {\n              if (typeof quoted_match === \"string\") {\n                return value.indexOf(quoted_match) !== -1;\n              } else {\n                return quoted_match.test(value);\n              }\n            });\n          quotedMatch = quotedMatch && quotedMatch.length > 0;\n          // See https://github.com/adaltas/node-csv/pull/387\n          // More about CSV injection or formula injection, when websites embed\n          // untrusted input inside CSV files:\n          // https://owasp.org/www-community/attacks/CSV_Injection\n          // http://georgemauer.net/2017/10/07/csv-injection.html\n          // Apple Numbers unicode normalization is empirical from testing\n          if (escape_formulas) {\n            switch (value[0]) {\n              case \"=\":\n              case \"+\":\n              case \"-\":\n              case \"@\":\n              case \"\\t\":\n              case \"\\r\":\n              case \"\\uFF1D\": // Unicode '='\n              case \"\\uFF0B\": // Unicode '+'\n              case \"\\uFF0D\": // Unicode '-'\n              case \"\\uFF20\": // Unicode '@'\n                value = `'${value}`;\n                break;\n            }\n          }\n          const shouldQuote =\n            containsQuote === true ||\n            containsdelimiter ||\n            containsRecordDelimiter ||\n            quoted ||\n            quotedString ||\n            quotedMatch;\n          if (shouldQuote === true && containsEscape === true) {\n            const regexp =\n              escape === \"\\\\\"\n                ? new RegExp(escape + escape, \"g\")\n                : new RegExp(escape, \"g\");\n            value = value.replace(regexp, escape + escape);\n          }\n          if (containsQuote === true) {\n            const regexp = new RegExp(quote, \"g\");\n            value = value.replace(regexp, escape + quote);\n          }\n          if (shouldQuote === true) {\n            value = quote + value + quote;\n          }\n          csvrecord += value;\n        } else if (\n          quoted_empty === true ||\n          (field === \"\" && quoted_string === true && quoted_empty !== false)\n        ) {\n          csvrecord += quote + quote;\n        }\n        if (i !== record.length - 1) {\n          csvrecord += delimiter;\n        }\n      }\n      return [undefined, csvrecord];\n    },\n    bom: function (push) {\n      if (this.options.bom !== true) {\n        return;\n      }\n      push(bom_utf8);\n    },\n    headers: function (push) {\n      if (this.options.header === false) {\n        return;\n      }\n      if (this.options.columns === undefined) {\n        return;\n      }\n      let err;\n      let headers = this.options.columns.map((column) => column.header);\n      if (this.options.eof) {\n        [err, headers] = this.stringify(headers, true);\n        headers += this.options.record_delimiter;\n      } else {\n        [err, headers] = this.stringify(headers);\n      }\n      if (err) return err;\n      push(headers);\n    },\n    __cast: function (value, context) {\n      const type = typeof value;\n      try {\n        if (type === \"string\") {\n          // Fine for 99% of the cases\n          return [undefined, this.options.cast.string(value, context)];\n        } else if (type === \"bigint\") {\n          return [undefined, this.options.cast.bigint(value, context)];\n        } else if (type === \"number\") {\n          return [undefined, this.options.cast.number(value, context)];\n        } else if (type === \"boolean\") {\n          return [undefined, this.options.cast.boolean(value, context)];\n        } else if (value instanceof Date) {\n          return [undefined, this.options.cast.date(value, context)];\n        } else if (type === \"object\" && value !== null) {\n          return [undefined, this.options.cast.object(value, context)];\n        } else {\n          return [undefined, value, value];\n        }\n      } catch (err) {\n        return [err];\n      }\n    },\n  };\n};\n\nconst stringify = function (records, opts = {}) {\n  const data = [];\n  const [err, options] = normalize_options(opts);\n  if (err !== undefined) throw err;\n  const state = {\n    stop: false,\n  };\n  // Information\n  const info = {\n    records: 0,\n  };\n  const api = stringifier(options, state, info);\n  for (const record of records) {\n    const err = api.__transform(record, function (record) {\n      data.push(record);\n    });\n    if (err !== undefined) throw err;\n  }\n  if (data.length === 0) {\n    api.bom((d) => {\n      data.push(d);\n    });\n    const err = api.headers((headers) => {\n      data.push(headers);\n    });\n    if (err !== undefined) throw err;\n  }\n  return data.join(\"\");\n};\n\nexports.stringify = stringify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/csv-stringify/dist/cjs/sync.cjs\n");

/***/ })

};
;